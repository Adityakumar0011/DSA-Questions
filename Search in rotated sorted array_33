int getPivot(vector<int>& arr){
    int start=0;
    int end=arr.size()-1;
    int mid=start + (end-start)/2;

    while(start<end){
        if(arr[mid]>=arr[0]){
            start=mid+1;
        }
        else{
            end=mid;
        }
        mid=start + (end-start)/2;
    }
    return start;
}

int binarySearch(vector<int>& arr,int s,int e,int key){
    int start=s;
    int end=e;
    int mid=(start+end)/2;      // we can write it as{start +(end-start)/2 } to avoid error

    while(start<=end){
        if(arr[mid]==key){
            return mid;
        }
        // go to right wala part
        if(key>arr[mid]){
            start=mid+1;
        }
        else{
            end=mid-1;
        }
        mid=(start+end)/2;
    }
    return -1;
}

class Solution {
public:
    int search(vector<int>& arr, int target) {
        int n=arr.size();
        int pivot=getPivot(arr);
        if(target>=arr[pivot]&& target<=arr[n-1]){
            // BS on second line
            return binarySearch(arr,pivot,n-1,target);
        }
        else{
            // binary search on fist line
            return binarySearch(arr,0,pivot-1,target);
        }   
    }
};
